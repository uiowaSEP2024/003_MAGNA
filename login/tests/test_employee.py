# Generated by CodiumAI

import pytest
from django.core.exceptions import ValidationError

from login.models import Employee


class TestEmployee:

    @pytest.mark.django_db
    def test_create_employee_with_valid_details(self):
        """Creating a new employee with valid name, role, clock number and email should succeed"""
        employee = Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="john.doe@example.com",
        )
        assert employee.name == "John Doe"
        assert employee.role == "Manager"
        assert employee.clock_number == "12345"
        assert employee.email == "john.doe@example.com"

    @pytest.mark.django_db
    def test_retrieve_employee_by_clock_number(self):
        """Retrieving an existing employee by their clock number should return the correct employee object"""
        employee = Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="john.doe@example.com",
        )
        employee.save()
        retrieved_employee = Employee.objects.get(clock_number="12345")
        assert retrieved_employee == employee

    @pytest.mark.django_db
    def test_update_employee_details(self):
        """Updating an existing employee's name, role or email should succeed"""
        employee = Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="john.doe@example.com",
        )
        employee.save()
        employee.name = "Jane Smith"
        employee.role = "Supervisor"
        employee.email = "jane.smith@example.com"
        employee.save()
        updated_employee = Employee.objects.get(clock_number="12345")
        assert updated_employee.name == "Jane Smith"
        assert updated_employee.role == "Supervisor"
        assert updated_employee.email == "jane.smith@example.com"

    @pytest.mark.django_db
    def test_delete_employee(self):
        """Deleting an existing employee should remove them from the database"""
        employee = Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="john.doe@example.com",
        )
        employee.save()
        employee.delete()
        with pytest.raises(Employee.DoesNotExist):
            Employee.objects.get(clock_number="12345")

    @pytest.mark.django_db
    def test_create_employee_with_long_name(self):
        """Creating an employee with a name that is too long should raise a validation error"""
        with pytest.raises(ValidationError):
            Employee(
                name="101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960",
                username="johndoe",
                password="password",
                role="Manager",
                clock_number="12345",
                email="john.doe@example.com",
            ).full_clean()

    @pytest.mark.django_db
    def test_create_employee_with_long_role(self):
        """Creating an employee with a role that is too long should raise a validation error"""
        with pytest.raises(ValidationError):
            Employee(
                name="John Doe",
                role="101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960",
                username="johndoe",
                password="password",
                clock_number="12345",
                email="john.doe@example.com",
            ).full_clean()

    @pytest.mark.django_db
    def test_create_employee_with_existing_clock_number(self):
        """Creating an employee with a clock number that is already in use should raise a unique constraint error"""
        Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="john.doe@example.com",
        ).save()
        with pytest.raises(ValidationError):
            Employee(
                name="Jane Smith",
                username="johndoe",
                password="password",
                role="Supervisor",
                clock_number="12345",
                email="jane.smith@example.com",
            ).save()

    @pytest.mark.django_db
    def test_create_employee_with_invalid_email(self):
        """Creating an employee with an invalid email address should raise a validation error"""
        with pytest.raises(ValidationError):
            Employee(
                name="John Doe",
                username="johndoe",
                password="password",
                role="Manager",
                clock_number="12345",
                email="invalid_email",
            ).save()

    @pytest.mark.django_db
    def test_retrieve_nonexistent_employee_by_clock_number(self):
        """Retrieving a non-existent employee by their clock number should return None"""
        retrieved_employee = Employee.objects.filter(clock_number="12345").first()
        assert retrieved_employee is None

    @pytest.mark.django_db
    def test_update_employee_clock_number_to_existing(self):
        """Updating an existing employee's clock number to one that is already in use should raise a unique constraint error"""
        Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="john.doe@example.com",
        ).save()
        employee = Employee(
            name="Jane Smith",
            username="johndoe2",
            password="password",
            role="Supervisor",
            clock_number="54321",
            email="jane.smith@example.com",
        )
        employee.save()
        employee.clock_number = "12345"
        with pytest.raises(ValidationError):
            employee.save().full_clean()

    @pytest.mark.django_db
    def test_deleting_non_existent_employee(self):
        """Deleting a non-existent employee should not raise an error"""
        # Create a new employee
        employee = Employee(
            name="John Doe",
            username="johndoe",
            password="password",
            role="Manager",
            clock_number="12345",
            email="johndoe@example.com",
        )
        employee.save()

        # Delete the employee
        employee.delete()

        # Try to delete the employee again
        with pytest.raises(ValueError):
            employee.delete()

    @pytest.mark.django_db
    def test_blank_name_validation_error(self):
        """Creating an employee with a blank name should raise a validation error"""
        with pytest.raises(ValidationError):
            employee = Employee(
                name="", username="johndoe", password="password", role="Manager", clock_number="12345", email="test@example.com"
            )
            employee.full_clean()

    @pytest.mark.django_db
    def test_blank_role_validation_error(self):
        """Creating an employee with a blank role should raise a validation error"""
        with pytest.raises(ValidationError):
            employee = Employee(
                name="John Doe",
                username="johndoe",
                password="password",
                role="",
                clock_number="12345",
                email="john.doe@example.com",
            )
            employee.full_clean()

    @pytest.mark.django_db
    def test_blank_clock_number_validation_error(self):
        """Creating an employee with a blank clock number should raise a validation error"""
        with pytest.raises(ValidationError):
            employee = Employee(
                name="John Doe",
                username="johndoe",
                password="password",
                role="Manager",
                clock_number="",
                email="john.doe@example.com",
            )
            employee.full_clean()

    @pytest.mark.django_db
    def test_blank_email_validation_error(self):
        """Creating an employee with a blank email address should raise a validation error"""
        with pytest.raises(ValidationError):
            employee = Employee(
                name="John Doe", username="", password="password", role="Manager", clock_number="12345", email=""
            )
            employee.full_clean()
